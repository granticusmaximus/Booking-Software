// <auto-generated />
using coderush.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace coderush.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.3-rtm-10026")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("coderush.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("coderush.Models.BookCar", b =>
                {
                    b.Property<int>("BookCarId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("AllDay");

                    b.Property<int>("CarId");

                    b.Property<string>("Categorize");

                    b.Property<DateTime>("CreateAtUtc");

                    b.Property<string>("CreateBy");

                    b.Property<string>("Description");

                    b.Property<DateTimeOffset>("EndTime");

                    b.Property<string>("EndTimeZone");

                    b.Property<string>("Location");

                    b.Property<int>("OwnerId");

                    b.Property<string>("Priority");

                    b.Property<bool>("Recurrence");

                    b.Property<DateTimeOffset>("RecurrenceExDate");

                    b.Property<int>("RecurrenceId");

                    b.Property<string>("RecurrenceRule");

                    b.Property<DateTimeOffset>("StartTime");

                    b.Property<string>("StartTimeZone");

                    b.Property<string>("Subject");

                    b.Property<DateTime>("UpdateAtUtc");

                    b.Property<string>("UpdateBy");

                    b.HasKey("BookCarId");

                    b.ToTable("BookCar");
                });

            modelBuilder.Entity("coderush.Models.BookGeneral", b =>
                {
                    b.Property<int>("BookGeneralId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("AllDay");

                    b.Property<string>("Categorize");

                    b.Property<DateTime>("CreateAtUtc");

                    b.Property<string>("CreateBy");

                    b.Property<string>("Description");

                    b.Property<DateTimeOffset>("EndTime");

                    b.Property<string>("EndTimeZone");

                    b.Property<int>("GeneralId");

                    b.Property<string>("Location");

                    b.Property<int>("OwnerId");

                    b.Property<string>("Priority");

                    b.Property<bool>("Recurrence");

                    b.Property<DateTimeOffset>("RecurrenceExDate");

                    b.Property<int>("RecurrenceId");

                    b.Property<string>("RecurrenceRule");

                    b.Property<DateTimeOffset>("StartTime");

                    b.Property<string>("StartTimeZone");

                    b.Property<string>("Subject");

                    b.Property<DateTime>("UpdateAtUtc");

                    b.Property<string>("UpdateBy");

                    b.HasKey("BookGeneralId");

                    b.ToTable("BookGeneral");
                });

            modelBuilder.Entity("coderush.Models.BookMeetingRoom", b =>
                {
                    b.Property<int>("BookMeetingRoomId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("AllDay");

                    b.Property<string>("Categorize");

                    b.Property<DateTime>("CreateAtUtc");

                    b.Property<string>("CreateBy");

                    b.Property<string>("Description");

                    b.Property<DateTimeOffset>("EndTime");

                    b.Property<string>("EndTimeZone");

                    b.Property<string>("Location");

                    b.Property<int>("MeetingRoomId");

                    b.Property<int>("OwnerId");

                    b.Property<string>("Priority");

                    b.Property<bool>("Recurrence");

                    b.Property<DateTimeOffset>("RecurrenceExDate");

                    b.Property<int>("RecurrenceId");

                    b.Property<string>("RecurrenceRule");

                    b.Property<DateTimeOffset>("StartTime");

                    b.Property<string>("StartTimeZone");

                    b.Property<string>("Subject");

                    b.Property<DateTime>("UpdateAtUtc");

                    b.Property<string>("UpdateBy");

                    b.HasKey("BookMeetingRoomId");

                    b.ToTable("BookMeetingRoom");
                });

            modelBuilder.Entity("coderush.Models.Car", b =>
                {
                    b.Property<int>("CarId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CarName");

                    b.Property<string>("Color");

                    b.Property<DateTime>("CreateAtUtc");

                    b.Property<string>("CreateBy");

                    b.Property<string>("Description");

                    b.Property<DateTime>("UpdateAtUtc");

                    b.Property<string>("UpdateBy");

                    b.HasKey("CarId");

                    b.ToTable("Car");
                });

            modelBuilder.Entity("coderush.Models.General", b =>
                {
                    b.Property<int>("GeneralId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Color");

                    b.Property<DateTime>("CreateAtUtc");

                    b.Property<string>("CreateBy");

                    b.Property<string>("Description");

                    b.Property<string>("GeneralName");

                    b.Property<DateTime>("UpdateAtUtc");

                    b.Property<string>("UpdateBy");

                    b.HasKey("GeneralId");

                    b.ToTable("General");
                });

            modelBuilder.Entity("coderush.Models.MeetingRoom", b =>
                {
                    b.Property<int>("MeetingRoomId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Color");

                    b.Property<DateTime>("CreateAtUtc");

                    b.Property<string>("CreateBy");

                    b.Property<string>("Description");

                    b.Property<string>("MeetingRoomName");

                    b.Property<DateTime>("UpdateAtUtc");

                    b.Property<string>("UpdateBy");

                    b.HasKey("MeetingRoomId");

                    b.ToTable("MeetingRoom");
                });

            modelBuilder.Entity("coderush.Models.MyAgenda", b =>
                {
                    b.Property<int>("MyAgendaId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("AllDay");

                    b.Property<string>("Categorize");

                    b.Property<DateTime>("CreateAtUtc");

                    b.Property<string>("CreateBy");

                    b.Property<string>("Description");

                    b.Property<DateTimeOffset>("EndTime");

                    b.Property<string>("EndTimeZone");

                    b.Property<string>("Location");

                    b.Property<int>("OwnerId");

                    b.Property<string>("Priority");

                    b.Property<bool>("Recurrence");

                    b.Property<DateTimeOffset>("RecurrenceExDate");

                    b.Property<int>("RecurrenceId");

                    b.Property<string>("RecurrenceRule");

                    b.Property<DateTimeOffset>("StartTime");

                    b.Property<string>("StartTimeZone");

                    b.Property<string>("Subject");

                    b.Property<DateTime>("UpdateAtUtc");

                    b.Property<string>("UpdateBy");

                    b.HasKey("MyAgendaId");

                    b.ToTable("MyAgenda");
                });

            modelBuilder.Entity("coderush.Models.NumberSequence", b =>
                {
                    b.Property<int>("NumberSequenceId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("LastNumber");

                    b.Property<string>("Module")
                        .IsRequired();

                    b.Property<string>("NumberSequenceName")
                        .IsRequired();

                    b.Property<string>("Prefix")
                        .IsRequired();

                    b.HasKey("NumberSequenceId");

                    b.ToTable("NumberSequence");
                });

            modelBuilder.Entity("coderush.Models.UserProfile", b =>
                {
                    b.Property<int>("UserProfileId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApplicationUserId");

                    b.Property<string>("ConfirmPassword");

                    b.Property<DateTime>("CreateAtUtc");

                    b.Property<string>("CreateBy");

                    b.Property<string>("Email");

                    b.Property<string>("EmployeeCode");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<string>("OldPassword");

                    b.Property<string>("Password");

                    b.Property<string>("ProfilePicture");

                    b.Property<DateTime>("UpdateAtUtc");

                    b.Property<string>("UpdateBy");

                    b.HasKey("UserProfileId");

                    b.ToTable("UserProfile");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("coderush.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("coderush.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("coderush.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("coderush.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
